{"ast":null,"code":"import * as cookie from 'cookie';\nexport function hasDocumentCookie() {\n  // Can we get/set cookies on document.cookie?\n  return typeof document === 'object' && typeof document.cookie === 'string';\n}\nexport function cleanCookies() {\n  document.cookie.split(';').forEach(function (c) {\n    document.cookie = c.replace(/^ +/, '').replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\n  });\n}\nexport function parseCookies(cookies, options) {\n  if (typeof cookies === 'string') {\n    return cookie.parse(cookies, options);\n  } else if (typeof cookies === 'object' && cookies !== null) {\n    return cookies;\n  } else {\n    return {};\n  }\n}\nexport function isParsingCookie(value, doNotParse) {\n  if (typeof doNotParse === 'undefined') {\n    // We guess if the cookie start with { or [, it has been serialized\n    doNotParse = !value || value[0] !== '{' && value[0] !== '[' && value[0] !== '\"';\n  }\n\n  return !doNotParse;\n}\nexport function readCookie(value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var cleanValue = cleanupCookieValue(value);\n\n  if (isParsingCookie(cleanValue, options.doNotParse)) {\n    try {\n      return JSON.parse(cleanValue);\n    } catch (e) {// At least we tried\n    }\n  } // Ignore clean value if we failed the deserialization\n  // It is not relevant anymore to trim those values\n\n\n  return value;\n}\n\nfunction cleanupCookieValue(value) {\n  // express prepend j: before serializing a cookie\n  if (value && value[0] === 'j' && value[1] === ':') {\n    return value.substr(2);\n  }\n\n  return value;\n}","map":{"version":3,"names":["cookie","hasDocumentCookie","document","cleanCookies","split","forEach","c","replace","Date","toUTCString","parseCookies","cookies","options","parse","isParsingCookie","value","doNotParse","readCookie","cleanValue","cleanupCookieValue","JSON","e","substr"],"sources":["/Users/reginaldamedee/CodingProjects/calisthenics-prime/node_modules/universal-cookie/es6/utils.js"],"sourcesContent":["import * as cookie from 'cookie';\r\nexport function hasDocumentCookie() {\r\n    // Can we get/set cookies on document.cookie?\r\n    return typeof document === 'object' && typeof document.cookie === 'string';\r\n}\r\nexport function cleanCookies() {\r\n    document.cookie.split(';').forEach(function (c) {\r\n        document.cookie = c\r\n            .replace(/^ +/, '')\r\n            .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\r\n    });\r\n}\r\nexport function parseCookies(cookies, options) {\r\n    if (typeof cookies === 'string') {\r\n        return cookie.parse(cookies, options);\r\n    }\r\n    else if (typeof cookies === 'object' && cookies !== null) {\r\n        return cookies;\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n}\r\nexport function isParsingCookie(value, doNotParse) {\r\n    if (typeof doNotParse === 'undefined') {\r\n        // We guess if the cookie start with { or [, it has been serialized\r\n        doNotParse =\r\n            !value || (value[0] !== '{' && value[0] !== '[' && value[0] !== '\"');\r\n    }\r\n    return !doNotParse;\r\n}\r\nexport function readCookie(value, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var cleanValue = cleanupCookieValue(value);\r\n    if (isParsingCookie(cleanValue, options.doNotParse)) {\r\n        try {\r\n            return JSON.parse(cleanValue);\r\n        }\r\n        catch (e) {\r\n            // At least we tried\r\n        }\r\n    }\r\n    // Ignore clean value if we failed the deserialization\r\n    // It is not relevant anymore to trim those values\r\n    return value;\r\n}\r\nfunction cleanupCookieValue(value) {\r\n    // express prepend j: before serializing a cookie\r\n    if (value && value[0] === 'j' && value[1] === ':') {\r\n        return value.substr(2);\r\n    }\r\n    return value;\r\n}\r\n"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AACA,OAAO,SAASC,iBAAT,GAA6B;EAChC;EACA,OAAO,OAAOC,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAQ,CAACF,MAAhB,KAA2B,QAAlE;AACH;AACD,OAAO,SAASG,YAAT,GAAwB;EAC3BD,QAAQ,CAACF,MAAT,CAAgBI,KAAhB,CAAsB,GAAtB,EAA2BC,OAA3B,CAAmC,UAAUC,CAAV,EAAa;IAC5CJ,QAAQ,CAACF,MAAT,GAAkBM,CAAC,CACdC,OADa,CACL,KADK,EACE,EADF,EAEbA,OAFa,CAEL,KAFK,EAEE,eAAe,IAAIC,IAAJ,GAAWC,WAAX,EAAf,GAA0C,SAF5C,CAAlB;EAGH,CAJD;AAKH;AACD,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;EAC3C,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;IAC7B,OAAOX,MAAM,CAACa,KAAP,CAAaF,OAAb,EAAsBC,OAAtB,CAAP;EACH,CAFD,MAGK,IAAI,OAAOD,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;IACtD,OAAOA,OAAP;EACH,CAFI,MAGA;IACD,OAAO,EAAP;EACH;AACJ;AACD,OAAO,SAASG,eAAT,CAAyBC,KAAzB,EAAgCC,UAAhC,EAA4C;EAC/C,IAAI,OAAOA,UAAP,KAAsB,WAA1B,EAAuC;IACnC;IACAA,UAAU,GACN,CAACD,KAAD,IAAWA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAb,IAAoBA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjC,IAAwCA,KAAK,CAAC,CAAD,CAAL,KAAa,GADpE;EAEH;;EACD,OAAO,CAACC,UAAR;AACH;AACD,OAAO,SAASC,UAAT,CAAoBF,KAApB,EAA2BH,OAA3B,EAAoC;EACvC,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe;;EACzC,IAAIM,UAAU,GAAGC,kBAAkB,CAACJ,KAAD,CAAnC;;EACA,IAAID,eAAe,CAACI,UAAD,EAAaN,OAAO,CAACI,UAArB,CAAnB,EAAqD;IACjD,IAAI;MACA,OAAOI,IAAI,CAACP,KAAL,CAAWK,UAAX,CAAP;IACH,CAFD,CAGA,OAAOG,CAAP,EAAU,CACN;IACH;EACJ,CAVsC,CAWvC;EACA;;;EACA,OAAON,KAAP;AACH;;AACD,SAASI,kBAAT,CAA4BJ,KAA5B,EAAmC;EAC/B;EACA,IAAIA,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,GAAtB,IAA6BA,KAAK,CAAC,CAAD,CAAL,KAAa,GAA9C,EAAmD;IAC/C,OAAOA,KAAK,CAACO,MAAN,CAAa,CAAb,CAAP;EACH;;EACD,OAAOP,KAAP;AACH"},"metadata":{},"sourceType":"module"}