{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from 'axios';\nconst userToken = localStorage.getItem('userToken') ? localStorage.getItem('userToken') : null;\nexport const registerUser = createAsyncThunk('user/register', async (_ref, _ref2) => {\n  let {\n    userName,\n    email,\n    password\n  } = _ref;\n  let {\n    rejectWithValue\n  } = _ref2;\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    axios.post('http://localhost:5003/login', {\n      userName,\n      email,\n      password\n    }, config);\n  } catch (error) {\n    if (error.response && error.response.data.message) {\n      return rejectWithValue(error.response.data.message);\n    } else {\n      return rejectWithValue(error.message);\n    }\n  }\n});\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [registerUser.pending]: state => {\n      state.loading = true;\n      state.error = null;\n    },\n    [registerUser.fulfilled]: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.loading = false;\n      state.success = true;\n    },\n    [registerUser.rejected]: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.loading = false;\n      state.error = payload;\n    }\n  }\n}); // export const login = createAsyncThunk('login/loginUser', async ({ email, password }, { rejectWithValue }) => {\n//     try {\n//         const config = {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//         }\n//         const { data } = await axios.post('http://localhost:5003/login', {\n//             email,\n//             password\n//         }, config)\n//         localStorage.setItem('userToken', data.userToken)\n//         return data\n//     } catch (error) {\n//         if (error.response && error.response.data.message) {\n//             return rejectWithValue(error.response.data.message)\n//         } else {\n//             return rejectWithValue(error.message)\n//         }\n//     }\n// })\n// const loginSliceReducer = createSlice({\n//     name: \"login\",\n//     initialState,\n//     extraReducers: builder => {\n//         builder.addCase(login.pending, state => {\n//             state.loading = true\n//         })\n//         builder.addCase(login.fulfilled, (state, action) => {\n//             state.loading = false\n//             state.user = action.payload\n//         })\n//         builder.addCase(login.rejected, (state, action) => {\n//             state.loading = false\n//             state.user = []\n//             state.error = action.error.message\n//         })\n//     }\n// })\n\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","userToken","localStorage","getItem","registerUser","userName","email","password","rejectWithValue","config","headers","post","error","response","data","message","userSlice","name","initialState","reducers","extraReducers","pending","state","loading","fulfilled","payload","success","rejected","reducer"],"sources":["/Users/reginaldamedee/CodingProjects/calisthenics-prime/client/src/features/user/userAction.js"],"sourcesContent":["import { createSlice, createAsyncThunk} from \"@reduxjs/toolkit\";\nimport axios from 'axios'\n\nconst userToken = localStorage.getItem('userToken') ? localStorage.getItem('userToken') : null\n\n\nexport const registerUser = createAsyncThunk('user/register', async ({ userName, email, password }, { rejectWithValue }) => {\n    try {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }\n        axios.post('http://localhost:5003/login', {\n            userName,\n            email,\n            password\n        }, config)\n    } catch (error) {\n        if (error.response && error.response.data.message) {\n            return rejectWithValue(error.response.data.message)\n        } else {\n            return rejectWithValue(error.message)\n        }\n    }\n})\n\nconst userSlice = createSlice({\n    name: 'user',\n    initialState,\n    reducers: {},\n    extraReducers: {\n        [registerUser.pending]: (state) => {\n            state.loading = true\n            state.error = null\n        },\n        [registerUser.fulfilled]: (state, {payload}) => {\n            state.loading = false\n            state.success = true\n        },\n        [registerUser.rejected]: (state, {payload}) => {\n            state.loading = false\n            state.error = payload\n        }\n    }\n})\n\n// export const login = createAsyncThunk('login/loginUser', async ({ email, password }, { rejectWithValue }) => {\n//     try {\n//         const config = {\n//             headers: {\n//                 'Content-Type': 'application/json'\n//             },\n//         }\n//         const { data } = await axios.post('http://localhost:5003/login', {\n//             email,\n//             password\n//         }, config)\n\n//         localStorage.setItem('userToken', data.userToken)\n//         return data\n//     } catch (error) {\n//         if (error.response && error.response.data.message) {\n//             return rejectWithValue(error.response.data.message)\n//         } else {\n//             return rejectWithValue(error.message)\n//         }\n//     }\n// })\n\n// const loginSliceReducer = createSlice({\n//     name: \"login\",\n//     initialState,\n//     extraReducers: builder => {\n//         builder.addCase(login.pending, state => {\n//             state.loading = true\n//         })\n//         builder.addCase(login.fulfilled, (state, action) => {\n//             state.loading = false\n//             state.user = action.payload\n//         })\n//         builder.addCase(login.rejected, (state, action) => {\n//             state.loading = false\n//             state.user = []\n//             state.error = action.error.message\n//         })\n//     }\n// })\n\nexport default userSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IAAoCD,YAAY,CAACC,OAAb,CAAqB,WAArB,CAApC,GAAwE,IAA1F;AAGA,OAAO,MAAMC,YAAY,GAAGL,gBAAgB,CAAC,eAAD,EAAkB,uBAA8D;EAAA,IAAvD;IAAEM,QAAF;IAAYC,KAAZ;IAAmBC;EAAnB,CAAuD;EAAA,IAAxB;IAAEC;EAAF,CAAwB;;EACxH,IAAI;IACA,MAAMC,MAAM,GAAG;MACXC,OAAO,EAAE;QACL,gBAAgB;MADX;IADE,CAAf;IAKAV,KAAK,CAACW,IAAN,CAAW,6BAAX,EAA0C;MACtCN,QADsC;MAEtCC,KAFsC;MAGtCC;IAHsC,CAA1C,EAIGE,MAJH;EAKH,CAXD,CAWE,OAAOG,KAAP,EAAc;IACZ,IAAIA,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBC,OAA1C,EAAmD;MAC/C,OAAOP,eAAe,CAACI,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBC,OAArB,CAAtB;IACH,CAFD,MAEO;MACH,OAAOP,eAAe,CAACI,KAAK,CAACG,OAAP,CAAtB;IACH;EACJ;AACJ,CAnB2C,CAArC;AAqBP,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC1BmB,IAAI,EAAE,MADoB;EAE1BC,YAF0B;EAG1BC,QAAQ,EAAE,EAHgB;EAI1BC,aAAa,EAAE;IACX,CAAChB,YAAY,CAACiB,OAAd,GAAyBC,KAAD,IAAW;MAC/BA,KAAK,CAACC,OAAN,GAAgB,IAAhB;MACAD,KAAK,CAACV,KAAN,GAAc,IAAd;IACH,CAJU;IAKX,CAACR,YAAY,CAACoB,SAAd,GAA0B,CAACF,KAAD,YAAsB;MAAA,IAAd;QAACG;MAAD,CAAc;MAC5CH,KAAK,CAACC,OAAN,GAAgB,KAAhB;MACAD,KAAK,CAACI,OAAN,GAAgB,IAAhB;IACH,CARU;IASX,CAACtB,YAAY,CAACuB,QAAd,GAAyB,CAACL,KAAD,YAAsB;MAAA,IAAd;QAACG;MAAD,CAAc;MAC3CH,KAAK,CAACC,OAAN,GAAgB,KAAhB;MACAD,KAAK,CAACV,KAAN,GAAca,OAAd;IACH;EAZU;AAJW,CAAD,CAA7B,C,CAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeT,SAAS,CAACY,OAAzB"},"metadata":{},"sourceType":"module"}